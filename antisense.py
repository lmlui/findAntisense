# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_antisense', [dirname(__file__)])
        except ImportError:
            import _antisense
            return _antisense
        if fp is not None:
            try:
                _mod = imp.load_module('_antisense', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _antisense = swig_import_helper()
    del swig_import_helper
else:
    import _antisense
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Duplex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duplex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duplex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seqA"] = _antisense.Duplex_seqA_set
    __swig_getmethods__["seqA"] = _antisense.Duplex_seqA_get
    if _newclass:seqA = _swig_property(_antisense.Duplex_seqA_get, _antisense.Duplex_seqA_set)
    __swig_setmethods__["seqB"] = _antisense.Duplex_seqB_set
    __swig_getmethods__["seqB"] = _antisense.Duplex_seqB_get
    if _newclass:seqB = _swig_property(_antisense.Duplex_seqB_get, _antisense.Duplex_seqB_set)
    __swig_setmethods__["seqNumA"] = _antisense.Duplex_seqNumA_set
    __swig_getmethods__["seqNumA"] = _antisense.Duplex_seqNumA_get
    if _newclass:seqNumA = _swig_property(_antisense.Duplex_seqNumA_get, _antisense.Duplex_seqNumA_set)
    __swig_setmethods__["seqNumB"] = _antisense.Duplex_seqNumB_set
    __swig_getmethods__["seqNumB"] = _antisense.Duplex_seqNumB_get
    if _newclass:seqNumB = _swig_property(_antisense.Duplex_seqNumB_get, _antisense.Duplex_seqNumB_set)
    __swig_setmethods__["startA"] = _antisense.Duplex_startA_set
    __swig_getmethods__["startA"] = _antisense.Duplex_startA_get
    if _newclass:startA = _swig_property(_antisense.Duplex_startA_get, _antisense.Duplex_startA_set)
    __swig_setmethods__["startB"] = _antisense.Duplex_startB_set
    __swig_getmethods__["startB"] = _antisense.Duplex_startB_get
    if _newclass:startB = _swig_property(_antisense.Duplex_startB_get, _antisense.Duplex_startB_set)
    __swig_setmethods__["length"] = _antisense.Duplex_length_set
    __swig_getmethods__["length"] = _antisense.Duplex_length_get
    if _newclass:length = _swig_property(_antisense.Duplex_length_get, _antisense.Duplex_length_set)
    __swig_setmethods__["annotBp"] = _antisense.Duplex_annotBp_set
    __swig_getmethods__["annotBp"] = _antisense.Duplex_annotBp_get
    if _newclass:annotBp = _swig_property(_antisense.Duplex_annotBp_get, _antisense.Duplex_annotBp_set)
    __swig_setmethods__["score"] = _antisense.Duplex_score_set
    __swig_getmethods__["score"] = _antisense.Duplex_score_get
    if _newclass:score = _swig_property(_antisense.Duplex_score_get, _antisense.Duplex_score_set)
    def __init__(self): 
        this = _antisense.new_Duplex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _antisense.delete_Duplex
    __del__ = lambda self : None;
Duplex_swigregister = _antisense.Duplex_swigregister
Duplex_swigregister(Duplex)

class _DuplexListItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DuplexListItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DuplexListItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duplex"] = _antisense._DuplexListItem_duplex_set
    __swig_getmethods__["duplex"] = _antisense._DuplexListItem_duplex_get
    if _newclass:duplex = _swig_property(_antisense._DuplexListItem_duplex_get, _antisense._DuplexListItem_duplex_set)
    __swig_setmethods__["next"] = _antisense._DuplexListItem_next_set
    __swig_getmethods__["next"] = _antisense._DuplexListItem_next_get
    if _newclass:next = _swig_property(_antisense._DuplexListItem_next_get, _antisense._DuplexListItem_next_set)
    def __init__(self): 
        this = _antisense.new__DuplexListItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _antisense.delete__DuplexListItem
    __del__ = lambda self : None;
_DuplexListItem_swigregister = _antisense._DuplexListItem_swigregister
_DuplexListItem_swigregister(_DuplexListItem)

class DuplexList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplexList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DuplexList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["head"] = _antisense.DuplexList_head_set
    __swig_getmethods__["head"] = _antisense.DuplexList_head_get
    if _newclass:head = _swig_property(_antisense.DuplexList_head_get, _antisense.DuplexList_head_set)
    __swig_setmethods__["tail"] = _antisense.DuplexList_tail_set
    __swig_getmethods__["tail"] = _antisense.DuplexList_tail_get
    if _newclass:tail = _swig_property(_antisense.DuplexList_tail_get, _antisense.DuplexList_tail_set)
    __swig_setmethods__["length"] = _antisense.DuplexList_length_set
    __swig_getmethods__["length"] = _antisense.DuplexList_length_get
    if _newclass:length = _swig_property(_antisense.DuplexList_length_get, _antisense.DuplexList_length_set)
    def __init__(self): 
        this = _antisense.new_DuplexList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _antisense.delete_DuplexList
    __del__ = lambda self : None;
DuplexList_swigregister = _antisense.DuplexList_swigregister
DuplexList_swigregister(DuplexList)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _antisense.Config_mode_set
    __swig_getmethods__["mode"] = _antisense.Config_mode_get
    if _newclass:mode = _swig_property(_antisense.Config_mode_get, _antisense.Config_mode_set)
    __swig_setmethods__["minLen"] = _antisense.Config_minLen_set
    __swig_getmethods__["minLen"] = _antisense.Config_minLen_get
    if _newclass:minLen = _swig_property(_antisense.Config_minLen_get, _antisense.Config_minLen_set)
    __swig_setmethods__["maxGuBp"] = _antisense.Config_maxGuBp_set
    __swig_getmethods__["maxGuBp"] = _antisense.Config_maxGuBp_get
    if _newclass:maxGuBp = _swig_property(_antisense.Config_maxGuBp_get, _antisense.Config_maxGuBp_set)
    __swig_setmethods__["maxMismatches"] = _antisense.Config_maxMismatches_set
    __swig_getmethods__["maxMismatches"] = _antisense.Config_maxMismatches_get
    if _newclass:maxMismatches = _swig_property(_antisense.Config_maxMismatches_get, _antisense.Config_maxMismatches_set)
    __swig_setmethods__["mask"] = _antisense.Config_mask_set
    __swig_getmethods__["mask"] = _antisense.Config_mask_get
    if _newclass:mask = _swig_property(_antisense.Config_mask_get, _antisense.Config_mask_set)
    def __init__(self): 
        this = _antisense.new_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _antisense.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _antisense.Config_swigregister
Config_swigregister(Config)


def setConfig(*args):
  return _antisense.setConfig(*args)
setConfig = _antisense.setConfig

def findDuplexes(*args):
  return _antisense.findDuplexes(*args)
findDuplexes = _antisense.findDuplexes

def makeDuplex(*args):
  return _antisense.makeDuplex(*args)
makeDuplex = _antisense.makeDuplex

def findDuplexesBetweenTwoSeqs(*args):
  return _antisense.findDuplexesBetweenTwoSeqs(*args)
findDuplexesBetweenTwoSeqs = _antisense.findDuplexesBetweenTwoSeqs

def cloneDuplex(*args):
  return _antisense.cloneDuplex(*args)
cloneDuplex = _antisense.cloneDuplex

def scoreSubDuplexes(*args):
  return _antisense.scoreSubDuplexes(*args)
scoreSubDuplexes = _antisense.scoreSubDuplexes

def scoreDuplexSimple(*args):
  return _antisense.scoreDuplexSimple(*args)
scoreDuplexSimple = _antisense.scoreDuplexSimple

def appendToDuplexList(*args):
  return _antisense.appendToDuplexList(*args)
appendToDuplexList = _antisense.appendToDuplexList

def concatDuplexLists(*args):
  return _antisense.concatDuplexLists(*args)
concatDuplexLists = _antisense.concatDuplexLists

def freeDuplexList(*args):
  return _antisense.freeDuplexList(*args)
freeDuplexList = _antisense.freeDuplexList

def freeDuplex(*args):
  return _antisense.freeDuplex(*args)
freeDuplex = _antisense.freeDuplex
# This file is compatible with both classic and new-style classes.

cvar = _antisense.cvar

